import React, { useEffect, useRef, memo } from 'react';

interface TradingViewWidgetProps {
  symbol?: string;
  interval?: string; // e.g., "1", "5", "15", "30", "60", "D", "W", "M"
  darkMode?: boolean;
  // Add any other configuration options you might want to pass as props
  style?: string; // e.g., "1", "2", "3"
  locale?: string; // e.g., "en", "es"
}

const TradingViewWidget: React.FC<TradingViewWidgetProps> = memo(({
  symbol = "FX:EURUSD", // Default symbol
  interval = "15",         // Default interval (Daily)
  darkMode = true,       // Default theme
  style = "1",            // Default style (Bars)
  locale = "en"           // Default locale
}) => {
  const containerRef = useRef<HTMLDivElement>(null);
  // Use a ref to track if the script has already been added
  const scriptAddedRef = useRef(false);

  useEffect(() => {
    // Ensure this effect runs only once per component instance
    if (!containerRef.current || scriptAddedRef.current) {
      return;
    }

    const script = document.createElement("script");
    script.src = "https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js";
    script.type = "text/javascript";
    script.async = true;

    // Construct the configuration JSON
    const widgetConfig = {
      autosize: true,
      symbol: symbol,
      interval: String(interval), // Ensure interval is string
      timezone: "Etc/UTC",
      theme: "dark",
      style: String(style), // Ensure style is string
      locale: locale,
      hide_side_toolbar: false,
      allow_symbol_change: true,
      hide_volume: true,
      // Add other relevant config options here based on TradingView docs
      // "withdateranges": true,
      // "hide_volume": true,
      support_host: "https://www.tradingview.com"
    };

    // Set the configuration as the innerHTML of the script tag
    script.innerHTML = JSON.stringify(widgetConfig);

    script.onerror = (error) => {
        console.error("TradingView widget script failed to load:", error);
    };
    script.onload = () => {
        console.log("TradingView widget script loaded.");
        // It might still fail to connect internally after loading
    };


    // Append the script to the container
    containerRef.current.appendChild(script);
    scriptAddedRef.current = true; // Mark script as added

    // Basic cleanup: remove the script when the component unmounts
    // Note: This specific widget type might not have a clean 'remove' API,
    // so removing the script and clearing the container is a common approach.
    return () => {
        if (containerRef.current) {
            // Find the added script and remove it
            const addedScript = containerRef.current.querySelector('script[src="https://s3.tradingview.com/external-embedding/embed-widget-advanced-chart.js"]');
            if (addedScript) {
                containerRef.current.removeChild(addedScript);
                console.log("Removed TradingView script on cleanup.");
            }
             // Clear any TradingView generated elements (like iframes)
             // Be cautious if other elements are supposed to be inside containerRef
             // While loop is safer than innerHTML = '' if direct children are expected
             while (containerRef.current.firstChild && containerRef.current.firstChild !== addedScript) {
                 containerRef.current.removeChild(containerRef.current.firstChild);
             }
        }
        scriptAddedRef.current = false; // Reset for potential future mounts if needed
    };

    // Dependencies: Re-run the effect ONLY if the props defining the config change.
    // NOTE: Because this script works by reading its initial innerHTML, changing props
    // after initial load WILL NOT update the chart. The component needs to be fully
    // re-mounted (e.g., by using a `key` prop on it that changes).
  }, []); // Run only once on mount

  // This structure mimics the TradingView example, though the inner divs might
  // not be strictly necessary as the script targets the containerRef.
  return (
    <div
        className="tradingview-widget-container"
        ref={containerRef}
        style={{ height: "100%", width: "100%", minHeight: "400px" }} // Ensure container has size
    >
      {/* These inner divs might be generated by the script itself,
          but including them doesn't usually hurt. */}
      <div
          className="tradingview-widget-container__widget"
          style={{ height: "calc(100% - 32px)", width: "100%" }}
      ></div>
      
    </div>
  );
});

export default TradingViewWidget;
